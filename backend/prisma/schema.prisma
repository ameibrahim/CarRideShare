generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}


datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  password     String
  fullName     String
  phoneNumber  String
  profileImage String    @default("default.jpg")
  rides        Ride[]    @relation("CreatedRides")
  bookings     Booking[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Ride {
  id              String     @id @default(uuid())
  createdBy       User       @relation("CreatedRides", fields: [createdById], references: [id])
  createdById     String
  startLocation   String     // Could be an address or place identifier
  endLocation     String     // Same as above
  taxiCalled      Boolean    @default(false)
  taxiArrivalTime DateTime?  // Nullable if no taxi is called
  cost            Decimal    @db.Decimal(10,2)
  totalSeats      Int
  availableSeats  Int
  status          RideStatus @default(SCHEDULED)
  bookings        Booking[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Booking {
  id              String   @id @default(uuid())
  ride            Ride     @relation(fields: [rideId], references: [id])
  rideId          String
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  costPerPassenger Decimal @db.Decimal(10,2)
  createdAt       DateTime @default(now())
}

enum RideStatus {
  SCHEDULED
  ONGOING
  ENDED
}

model FAQ {
  id        String   @id @default(uuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
